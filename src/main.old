import { Position } from "source-map";
import { ErrorMapper } from "utils/ErrorMapper";

import * as Drone from './drone';
import { buildRoad } from "utils/utils";
import { open } from "fs";
import { memoryUsage } from "process";

// type _Source = {
//   capacity : number ;
//   source   : Source ;
// }

function _source(source : Source) : Drone.PowerSource {

  return {
    capacity:sourceCapacity(source),
    source : source
  }
}

export const loop = ErrorMapper.wrapLoop(() => {

  // Automatically delete memory of missing creeps
  for (const name in Memory.creeps) {
    if (!(name in Game.creeps)) {
      delete Memory.creeps[name];
    }
  }

  const creeps        = <Creep[]>_.values(Game.creeps),
        spawn1        = Game.spawns.Spawn1,
        sources       = spawn1.room.find(FIND_SOURCES),
        spawnFeeders  = creeps.filter(creep =>
          (<Drone.Mem>creep.memory).task.cmds.some(cmd => cmd.op === 'deliver' && cmd.operand === spawn1.id)
        ),
        construction  = spawn1.room.find(FIND_MY_CONSTRUCTION_SITES),
        extensions    = spawn1.room.find(FIND_MY_STRUCTURES, { filter : { structureType : STRUCTURE_EXTENSION }}),
        harvesters    = creeps.filter(creep => (<Drone.Mem>creep.memory).role === 'harvester'),
        miners        = creeps.filter(creep => (<Drone.Mem>creep.memory).role === 'miner'),
        fighters      = creeps.filter(creep => (<Drone.Mem>creep.memory).role === 'fighter'),
        upgraders     = creeps.filter(creep => (<Drone.Mem>creep.memory).role === 'upgrader'),
        threats       = spawn1.room.find(FIND_HOSTILE_CREEPS),
        sourceKeepers = threats.filter(threat => threat.owner.username === 'Source Keeper'),
        level         = (spawn1.room.controller?.level || 0);

  console.log(`Current game tick is ${Game.time}, creeps : ${creeps.length}`);

  //console.log("creeps.length", creeps.length)

  if (spawn1.store.getFreeCapacity(RESOURCE_ENERGY) === 0 ) {

    //if ((spawn1.room.controller?.level || 0) < 3 ) {

    if ( level == 2 && creeps.length >= 6) {
      //buildRoad(spawn1.pos, sources[0].pos, spawn1);
      //buildExtensions(spawn1, {x:10, y:10})
      const newExtensions = [
        [20, 20],
        [20, 21],
        [20, 22],
        [20, 23],
        [20, 24],
        [20, 25],
        [20, 26],
        [20, 27],
        [20, 28],
        [20, 29],
        [20, 30],
      ];
      console.log("existing, new", extensions.length, newExtensions.length)
      if (extensions.length < newExtensions.length) {
        const ext = newExtensions[extensions.length],
              res = spawn1.room.createConstructionSite(ext[0], ext[1], STRUCTURE_EXTENSION);
        if (res !== 0) {
          console.log("extension construction error", res, JSON.stringify(ext));
        }
      }
    }

    // if (creeps.length === 6 && spawn1.room.controller !== undefined) {
    //   buildRoad(spawn1.room.controller.pos, sources[0].pos, spawn1);
    // }

    if (creeps.length < 3) {
      Drone.spawn(
        spawn1, 'harvester',
        spawn1.store.getUsedCapacity(RESOURCE_ENERGY),
        Drone.harvest(sources[0], spawn1)
      );
    }

    else if (creeps.length < 8) {
      if (spawn1.room.controller) {
        Drone.spawn(
          spawn1, 'harvester',
          spawn1.store.getUsedCapacity(RESOURCE_ENERGY),
          Drone.harvest(sources[0], spawn1.room.controller)
        );
      }
    }

    // else if (creeps.length < 6) {

    //   const source = sources[0];
    //   const miner = Drone.spawn(spawn1, 'miner',
    //     spawn1.store.getUsedCapacity(RESOURCE_ENERGY),
    //     Drone.mine(source)
    //   )
    //   //console.log("miner, harvester", miner, harvester)
    // }

    // else if (creeps.length < 12) {

    //   // if (creeps.length === 6) {
    //   //   assignHarvestersToMiners(harvesters, miners);
    //   //   //assignHarvestersToUpgrades(harvesters, spawn1.room.controller)
    //   // }

    //   if (spawn1.room.controller) {
    //     Drone.spawn(
    //       spawn1, 'upgrader',
    //       spawn1.store.getUsedCapacity(RESOURCE_ENERGY),
    //       Drone.upgrade(findLeastServedMiner(spawn1.room, miners), spawn1.room.controller)
    //       //Drone.upgrade(sources[0], spawn1.room.controller)
    //     );
    //   }
    // }

    else if (level >= 2) {
console.log("level2")

      harvesters
         .filter(creep => {
           const mem = (<Drone.Mem>creep.memory),
                 cmd = mem.task.cmds[1];
           return (cmd.op === 'deliver' && cmd.operand === spawn1.room.controller?.id);
        })
        .forEach(creep => {
          const mem = (<Drone.Mem>creep.memory);
          mem.task = {
            //cmds : Drone.buildnear(findLeastServedMiner(spawn1.room, miners)),
            cmds : Drone.buildnear(sources[0]),
            ptr  : 0
          }
          //mem.role = 'builder'
        });

      if (extensions.length > 3) {
        if (creeps.length < 15) {

          Drone.spawn(
            spawn1, 'harvester', //'builder',
            spawn1.store.getUsedCapacity(RESOURCE_ENERGY),
            // Drone.buildnear(findLeastServedMiner(spawn1.room, miners))
            Drone.buildnear(sources[0])
          );
        }

        else {
          // if (extensions.length > 3) {
          //   const oldMiner = miners.find(miner => miner.carryCapacity < 100);
          //   if (oldMiner) {
          //     Drone.spawn(
          //       spawn1, 'miner',
          //       spawn1.store.getUsedCapacity(RESOURCE_ENERGY),
          //       Drone.replace(oldMiner)
          //     );
          //   } else {

          //     // Drone.spawn(
          //     //   spawn1, 'fighter',
          //     //   spawn1.store.getUsedCapacity(RESOURCE_ENERGY),
          //     //   Drone.patrol({x:25, y:15}, {x:15, y:25})
          //     // );
          //   }
          }
        }
      }
    }
    // {

    // // if ((creeps.length > 3 && threats.length >  1) ||
    // //     (creeps.length > 6 && probably(0.5)      )) {
    //       // source  = creeps.length > 6 ? _.sample(sources.slice(1)) : sources[0],
    //       // target  = creeps.length > 6 ? (spawn1.room.controller || spawn1) : spawn1 ;
    //   const newName = 'Fighter' + Game.time;
    //   console.log('Spawning new fighter: ' + newName);
    //   Game.spawns['Spawn1'].spawnCreep([MOVE, TOUGH, RANGED_ATTACK], newName, {memory: defaultFighterMem()});
    // }
  //}

  //console.log("threats", threats.length, fighters.length)

  threats.forEach(threat => {
    const spareFighters = fighters.filter(creep => {
      const mem = (<Drone.Mem>creep.memory);
      //console.log("op", mem.task.cmds.length, mem.task.ptr, mem.task.cmds[mem.task.ptr || 0].op)
      //console.log("task", mem.task)
      return mem.task.ptr == undefined || mem.task.cmds[mem.task.ptr].op === 'patrol' || mem.task.cmds[mem.task.ptr] == undefined;
    });
    //console.log("spareFighters.length", spareFighters.length)
    if (spareFighters.length < 3) {
      // wait until stronger
    } else {
      _.take(spareFighters, 3).forEach(creep => {
        (<Drone.Mem>creep.memory).task = { cmds:[{ op:'attack', operand: threat.id}], ptr:0 };
      })
    }
  });

  //console.log("spawnFeeders.length",spawnFeeders.length);
  // if (Memory.road1 == undefined) {
  //   console.log("initiating road building")
  //   sources.filter(source => isSourceSafe(source, threats))
  //          .forEach(source => {
  //             spawn1.room.controller?.pos
  //               .findPathTo(source.source, { ignoreCreeps:true})
  //               .forEach(step =>
  //                 spawn1.room.createConstructionSite(step.x,step.y, STRUCTURE_ROAD))
  //               ;
  //          })

  //   // spawn1.room.controller?.pos.findPathTo(
  //   //     _.first(sortedSources(sources, threats))[0]
  //   //   ).forEach(step => spawn1.room.createConstructionSite(step.x,step.y, STRUCTURE_ROAD));
  //   Memory.road1 = true;
  // }

  // rooms.forEach(room => {
  //    console.log(room.name);
  // });

  // const idleCreeps = creeps.filter(creep => (<Drone.Mem>creep.memory).task.ptr == undefined).forEach(creep => {

  // });


  creeps.forEach(creep => {
    Drone.run(creep);
  });
});

// Shares supplied harvesters amongst supplied miners
function assignHarvestersToMiners(harvesters : Creep[], miners: Creep[]) {
  harvesters.forEach((harvester, i) => {
    assignHarvesterToMiner(harvester, miners[i%miners.length])
  });
}

// function suicideCreeps(spawn : StructureSpawn, creeps : Creep[]) {
//   creeps.forEach(creep => creep.suicide(-1))
// }

function findLeastServedMiner(room: Room, miners: Creep[]): Creep {
  const haulers = room.find(FIND_MY_CREEPS, {
    filter: creep => (<Drone.Mem>creep.memory).task.cmds.find(cmd => cmd.op === 'collect')
  });
  const minerHaulers = miners.map(miner => ({
    miner : miner,
    score : countAssignedHaulers(haulers, miner)
  }));
  return minerHaulers.sort((a, b) => a.score - b.score)[0].miner;
}

function countAssignedHaulers(haulers: Creep[], miner: Creep):number {
  return haulers.filter(hauler => {
    const mem = (<Drone.Mem>hauler.memory)
    return mem.task.cmds.find(cmd => cmd.op === 'collect' && cmd.operand == miner.id)
  }).length;
}

function assignHarvesterToMiner(harvester : Creep, miner : Creep) {
  const mem      = (<Drone.Mem>harvester.memory),
        cmdIndex = mem.task.cmds.findIndex(cmd => cmd.op === 'harvest');

  if (cmdIndex !== -1) {
    mem.task.cmds[cmdIndex] = {
      op      : 'collect',
      operand : miner.id
    }
  }
}

    // if ((<Drone.Mem>creep.memory).task.ptr == undefined) {
    //   // not doing anything so assign a task

    //   if ((<Drone.Mem>creep.memory).role === 'skutter') {
    //     // const coreFeeders = spawnFeeders.filter(creep =>
    //     //     (<Drone.Mem>creep.memory).task.cmds.some(cmd => cmd.op === 'harvest' && cmd.operand === sources[0].source.id)
    //     //   );

    //     //if (coreFeeders.length < 6) {

    //     if (skutters.length < 3) {
    //       creep.say('Core');
    //       (<Drone.Mem>creep.memory).task = {
    //         cmds:[
    //           { op: 'harvest', operand: sources[0].id },
    //           { op: 'deliver', operand: spawn1.id },
    //           { op: 'goto',    operand: 0}
    //         ],
    //         ptr:0
    //       }
    //     }

    //     //else if (construction.length > 0 ) { //&& spawnFeeders.length > 6
    //     else if (skutters.length < 6) {
    //       const source = sources[0]; //chooseSource(creep, sources.splice(1), threats);
    //       if (source) {
    //         creep.say('Build');
    //         (<Drone.Mem>creep.memory).task = {
    //           cmds:[
    //             { op: 'harvest', operand: source.id }, //_.sample(sources.splice(1)).id },
    //             { op: 'buildnear'           },
    //             { op: 'goto',    operand: 0 }
    //           ],
    //           ptr:0
    //         }
    //       }
    //     }

    //     else if (spawn1.room.controller) {
    //       const source = chooseSource(creep, sources.splice(1), threats);
    //       if (source) {
    //         creep.say('Upgrade');
    //         (<Drone.Mem>creep.memory).task = {
    //           cmds:[
    //             { op: 'harvest', operand: source.source.id }, //_.sample(sources.splice(1)).id },
    //             { op: 'deliver', operand: probably(0.5) ? spawn1.id : spawn1.room.controller.id },
    //             { op: 'goto',    operand: 0}
    //           ],
    //           ptr:0
    //         }
    //       }
    //     }
    //   }

    //   else if ((<Drone.Mem>creep.memory).role === 'miner') {
    //     creep.say('Dig for victory');
    //     (<Drone.Mem>creep.memory).task = {
    //       cmds:[
    //         { op: 'harvest', operand: sources[0].source.id },
    //         { op: 'offload'},
    //         { op: 'goto',    operand: 0}
    //       ],
    //       ptr:0
    //     }

    //   } else if ((<Drone.Mem>creep.memory).role === 'fighter') {
    //       (<Drone.Mem>creep.memory).task = {
    //         cmds:[
    //           { op: 'patrol', operand: { x:15, y:25 }},
    //           { op: 'patrol', operand: { x:25, y:15 }},
    //           { op: 'goto',   operand: 0}
    //         ],
    //         ptr:0
    //       }
    //     }
    //   }


// function defaultFighterMem():Drone.Mem {
//   return {
//     task:{
//       cmds:[],
//       ptr: undefined
//     },
//     role:'fighter', room:'', working:true
//   };
// }


// function defaultMem(overrides : Partial<Drone.Mem>):Drone.Mem {
//   return _.assign({},
//     {
//       task:{
//         cmds:[],
//         ptr: undefined
//       },
//     role:'skutter', room:'', working:true
//     },
//     overrides);
// }

function probably(chance:number):boolean {
  return Math.random() >= chance;
}

// function sortedSources(sources : Drone.PowerSource[], threats : Drone.Threat[]) : [Drone.PowerSource, number][] {
//   return weightedSources(sources, threats).sort((a,b) => b[1]-a[1]);
// }

function chooseSource(creep : Creep, sources : Drone.PowerSource[], threats : Drone.Threat[]) : Drone.PowerSource | undefined {
  return sources[0];
  //return weightedSample<Drone.PowerSource>(weightedSources(sources, threats));
}

// function weightedSources( sources : Drone.PowerSource[], threats : Drone.Threat[]) : [Drone.PowerSource, number][] {
//   return sources
//     .filter(source => isSourceSafe(source, threats))
//     .map((source : Drone.PowerSource) : [Drone.PowerSource, number] => ([source, sourceCapacity(source.source)]) );
// }

function weightedSample<T>(samples: [T, number][]): T | undefined {
  const totalWeight = _.sum(samples.map(([t, weight]) => weight)),
        random      = _.random(0, totalWeight);
  let c = 0;
  const sample = samples.find(sample => {
    if (sample != undefined) {
      c += sample[1];
    }
    return (c >= random);
  });
  return sample ? sample[0] : undefined
}

interface Weighted {
  weight : number;
}


function sourceCapacity(source : Source) : number {
  const spots = source?.room?.lookAtArea(source.pos.y-1, source.pos.x-1, source.pos.y+1, source.pos.x+1, true)
    .filter((tile: LookAtResult) => tile.type === 'terrain' && tile.terrain === 'plain')
    .length;
  return spots || 0;
}

// type Tile = { type : 'creep',     creep: Creep     } |
//             { type : 'terrain',   terrain: string  } |
//             { type : 'structure', creep: Structure };

const directions = [
  { x:0,  y:-1 },
  { x:1,  y:-1 },
  { x:1,  y:0  },
  { x:1,  y:1  },
  { x:0,  y:1  },
  { x:-1, y:-1 },
  { x:-1, y:0  },
  { x:-1, y:-1 }
]

// function sourcesMaxCreeps (source : Source, target : Drone.PowerConsumer) : number {

// }
